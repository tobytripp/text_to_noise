#!/usr/bin/env ruby
require 'optparse'

lib = File.expand_path( '../../lib/', __FILE__ )
$:.unshift lib unless $:.include?( lib )

require 'text_to_noise'

options = {
  :input  => $stdin,
  :mute   => false,
  :config => "sample.sounds.rb"
}

arg_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"
  opts.separator ""
  opts.separator "Options:"
  
  opts.on( "-f", "--file FILE",
    "Read input from FILE.  Defaults to stdin" ) { |f| options[:input] = File.open( f, "r" ) }
  opts.on( "-m", "--mute",
    "Don't play any sounds, just print what matched" ) { options[:mute] = true }
  opts.on( "-t", "--throttle DELAY",
    "Wait DELAY milliseconds before reading the next line of input." ) { |ms| options[:throttle] = ms.to_i }
  opts.on( "--debug", "Turn on debug logging" ) { options[:debug] = true }
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

mapping_files = arg_parser.parse!

begin
  TextToNoise::CommandLine.new( mapping_files, options ).run
rescue ArgumentError => e
  $stderr.puts arg_parser
  $stderr.puts <<-EOS

ERROR!

Error parsing configuration file, or configuration missing.
\t#{e}

Try this one if you're processing a Rails log:

  match /User Load/     => "nightingale"
  match /Processing/    => "finch"
  match /404 Not Found/ => "hawk"
  match /SessionsController#new/ => "owl"

you'll probably want to tune this yourself.  It can get a bit ridiculous if
you have any substantial amount of traffic.

Or maybe you're watching your ssh access:

  match /sshd.*Accepted/ => %w[rooster hawk chicken crow]

Copy one of those into a file and pass it along to text_to_noise.

For example:

  echo 'match /sshd.*Accepted/ => %w[rooster hawk chicken crow]' > ssh.sounds.rb
  tail -f /var/log/secure.log | text_to_noise ssh.sounds.rb

Still having problems?
  Try logging an issue at https://github.com/tobytripp/text_to_noise/issues
  or try bothering me on Twitter http://twitter.com/tobytripp


Thanks for playing!


EOS
  exit 1
end
